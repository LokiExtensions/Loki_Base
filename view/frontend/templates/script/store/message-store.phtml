<?php
declare(strict_types=1);

use Magento\Framework\View\Element\Template;

/** @var Template $block */
?>
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.store('LokiMessageStore', {
            messages: [],
            init() {
                Alpine.effect(() => {
                    const storeData = Alpine.store('LokiLocalStorage').data;
                    if (storeData && storeData.messages && storeData.messages.messages) {
                        this.messages = [...this.messages, ...storeData.messages.messages];
                        this.getStore().set('messages', {messages: []});
                    }
                });
            },
            getMessages() {
                const cookieMessages = LokiCookies.get('mage-messages') || [];
                if (cookieMessages && cookieMessages.length > 0) {
                    console.log('cookieMessages', cookieMessages);
                    this.messages = [...this.messages, ...cookieMessages];
                    LokiCookies.remove('mage-messages');
                }

                return this.messages;
            },
            addMessage(type, text) {
                this.messages.push({type, text});
            },
            removeMessage(text) {
                this.messages = Object.values(this.messages).filter(message => message.text !== text);
            },
            saveMessage(type, text) {
                const messages = this.getMessagesFromStore();
                messages.push({type, text});
                this.setMessageInStore(messages);
            },
            addErrorMessage(text) {
                this.addMessage('error', text);
            },
            addWarningMessage(text) {
                this.addMessage('warning', text);
            },
            addSuccessMessage(text) {
                this.addMessage('success', text);
            },
            addNoticeMessage(text) {
                this.addMessage('notice', text);
            },
            reset() {
                this.getStore().remove('messages');
            },
            getMessagesFromStore() {
                const messagesSection = this.getStore().data.messages;
                return messagesSection && messagesSection.messages ? messagesSection.messages : [];
            },
            setMessageInStore(messages) {
                const messagesSection = this.getStore().data.messages;
                messagesSection.messages = messages;
                this.getStore().set('messages', messagesSection);
            },
            getStore() {
                return Alpine.store('LokiLocalStorage');
            }
        });
    });
</script>
